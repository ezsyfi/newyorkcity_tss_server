name: Cargo Build & Test

on:
  push:
    branches: [dev]
  pull_request:
    branches: [dev]
  workflow_dispatch:
    branches: [dev]

env:
  CARGO_TERM_COLOR: always
  IMAGE_NAME: newyork_city
jobs:
  build:
    runs-on: ubuntu-latest
          
    strategy:
      matrix:
        toolchain:
          - nightly
    steps:
      - uses: actions/checkout@v3
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: rustup component add rustfmt

      - name: Docker Login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run:
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      - name: Cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: CI
        run: |
          cd ./newyork-server

          touch env.staging.toml
          echo HCMC_HOST=${{secrets.HCMC_HOST}} >> .env.staging
          echo HCMC_PORT=${{secrets.HCMC_PORT}} >> .env.staging

          touch env.test.toml
          echo TEST_EMAIL=${{secrets.TEST_EMAIL}} >> .env.test
          echo TEST_PASS=${{secrets.TEST_PASS}} >> .env.test
          echo TEST_SIGNIN_URL=${{secrets.TEST_SIGNIN_URL}} >> .env.test

          cargo fmt
          cargo test --verbose
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME:latest ${{secrets.DOCKER_USER}}/$IMAGE_NAME:latest
          docker push ${{secrets.DOCKER_USER}}/$IMAGE_NAME

      - name: CD
        uses: appleboy/ssh-action@master
        with:
            host: ${{secrets.EC2_HOST}}
            username: ubuntu
            key: ${{secrets.EC2_SSH_KEY}}
            envs: IMAGE_NAME
            script: |
              docker login 
              docker pull ${{secrets.DOCKER_USER}}/$IMAGE_NAME
              cd $HOME && \
              docker network inspect tss_new && \
              docker stop nyc && docker rm nyc && \
              docker run -d --name nyc -p ${{secrets.NYC_PORT}}:${{secrets.NYC_PORT}} --network=tss_new ${{secrets.DOCKER_USER}}/$IMAGE_NAME
