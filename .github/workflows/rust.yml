name: CI/CD newyork-server

on:
  push:
    branches:
      - "main"
      - "dev"
    tags:
      - "v*"
  pull_request:
    branches: [dev]
    types: [opened, closed]

env:
  REGISTRY: ghcr.io
  CARGO_TERM_COLOR: always
  IMAGE_NAME: newyork_city
jobs:
  build:
    if: ${{ github.event.action }} == 'opened'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        toolchain:
          - nightly
    steps:
      - uses: actions/checkout@v3
      - run: rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}
      - run: rustup component add rustfmt

      - name: Cache
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Test
        run: |
          cd ./newyork-server
          touch .env.staging
          echo HCMC_HOST=${{secrets.HCMC_HOST}} >> .env.staging
          echo ALCHEMY_API=${{secrets.ALCHEMY_API}} >> .env.staging

          touch .env.test
          echo TEST_EMAIL=${{secrets.TEST_EMAIL}} >> .env.test
          echo TEST_PASS=${{secrets.TEST_PASS}} >> .env.test
          echo TEST_SIGNIN_URL=${{secrets.TEST_SIGNIN_URL}} >> .env.test
          cargo fmt
          cargo test --verbose
  deploy:
    needs: build
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        run: |
          cd ./newyork-server
          touch .env.staging
          echo HCMC_HOST=${{secrets.HCMC_HOST}} >> .env.staging
          echo ALCHEMY_API=${{secrets.ALCHEMY_API}} >> .env.staging

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Log in to the Container registry
        if: ${{ github.event.pull_request.merged }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./newyork-server
          push: ${{ github.event.pull_request.merged }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ubuntu
          key: ${{secrets.EC2_SSH_KEY}}
          envs: IMAGE_NAME
          script: |
            export CR_PAT=YOUR_TOKEN
            echo $CR_PAT | docker login ${{ env.REGISTRY }} -u ${{ github.repository }} --password-stdin 
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}/$IMAGE_NAME
            cd $HOME && \
            docker network create --driver bridge tss_new || true && \
            docker stop nyc || true && docker rm nyc || true && \
            docker run -d --rm --name nyc --ip ${{secrets.NYC_CONTAINER_IP}} -p ${{secrets.NYC_PORT}}:${{secrets.NYC_PORT}} --network=tss_new ${{secrets.DOCKER_USER}}/$IMAGE_NAME
